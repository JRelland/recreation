Tout est documenté en anglais excepté ce que je veux faire afficher en français à l'utilisateur.

Mais pour résumer en français, je reviens vers vous pour vous demander de critiquer mon code - constructivement bien sûr ;-)
J'y ai apporté des modifications suite aux remarques/conseils qui m'ont été apportés dans l'issue "verif_temp3".
Encore merci à ceux qui m'ont donné leur avis et merci d'avance pour les prochains commentaires ! 

Si vous ne voyez rien à modifier, j'enlèverai juste le bout de code qui calcule la durée d'exécution du programme et 
je considèrerai ce programme comme terminé. "Chouette, je vais pouvoir m'atteler au suivant !" :-)
Yoann Aizac alias 'yaizac'


# verif_temps3
NOTE: this following text is a copy of the beginning of my program 
which is called "verif_temps3_for_mooc_v2.py". 
I explain you the context and I tried to summarize what each function does.


# Preamble (updated):
"""
This is an update of my program "verif_temps3_for_mooc.py".

I changed different things you told me in the issue related to 'verif_temp3':
- I put paths in variables just after the different imports,
- I tried to remove all global variables, there's still one in function n°2
'input_file_xjob' used to start counting duration of this program,
but I'll probably delete it in my final version.
- I removed the method 'exit()' in function 'input_file_xjob'
- I changed the code to display things with the method center()
- I used the method 'intersection()' in function n°5 'verif_characters'
to find unwanted characters in both sets
- I removed function 'verif_trigrammes' to avoid using a global variable and
I put the code in function n°6 'verif_numerotation'.
- I also removed last big function because I found the method 'timedelta'
(I use it on 2 lines in function n°10) and I could reduce function
'total_duration_time' by removing all conditions on months.
- I tried to put some 'return' in my functions, but as they contain functions
if I put a 'return' somewhere, the function ends... and I want it to launch
next function (with parameters).

Thank you for your comments and I would appreciate if you could criticize /
review my code again ! :-)
"""

# To explain you the context:
"""
I'm working in a chemical laboratory of the CNRS as engineer assistant,
my colleague and I manage 2 diffractometers in our scientific service.
Many samples are analyzed on one of them.
Each day: people prepare samples in holders, then we check them and put them
inside the diffractometer. We program them on the driving software and analyses
are done during the night (thanks to the autochanger, a robot that puts samples
in position under the X-ray beam).

We use different small "house" programs to check the existence of files,
send results files by email, print results (with a network printer),
translate files, copy files on a server... All these programs were coded
in Fortran by a retired researcher and I need to adapt them in Python (I really
don't want to learn how to use Fortran).

I already did a first program to automatically send results files to people,
by typing their trigram (3 letters), because everybody in my lab has a trigram
and an email address (with the same string after the '@').
It works but it can be improved too, I will modify it later.
"""

# About this program:
"""
Now I'm doing a house program to check that sample numbers have not been
analyzed before, because if it appends we'll lose lot of time to manage
our database (we keep all diffractograms from 1999).
So the aim of this program is to check sample numbers, trigrams, unwanted
characters, each sample number must respect a format, the existence of 'bsml'
files which are created by our driving software, and at the end we want to know
when all analyses are finished. We also want to know when there is an error.

This program contains 10 functions and only the 2 first are launched at the end
because other functions are launched from the second one. By this way, I avoid
using global variables.

Each function is documented (I hope enough) but I need to add that 'xjob' file
is an XML file containing all information typed in the driving software among:
sample position, number and description, 'bsml' experiment filename,
sample-holder, username and user group. One 'xjob' file can contain between 1
and N programmed samples (often less than 30).
Brut data files are saved with 'brml' extensions, but they are converted into
'raw' files with another program.
The only way to open 'bsml' experiment files when we don't have the driving
software on our computer is to replace 'bsml' extension by 'zip'. We can find
XML files inside the 'zip' where we get the duration of each 'bsml' file.
"""

# 10 functions (updated):
"""
- First function only displays last modification of this file (if it exists)
otherwise a try/except catches the exception 'FileNotFoundError'
- In second one we ask user to type 'xjob' filename without its extension and
we start counting duration of the program
- Then third function checks the existence of this 'xjob' filename
- 4th function opens this file and cleans lines
- Functions 5 and 6 check unwanted characters, sample numbers formats and
trigrams
- Functions 7 and 8 check the existence of these numbers in our database and
'bsml' experiment files
- Function 9 fix an error when 'bsml' filename has a space, copy 'bsml' files
in a folder and convert them into 'zip' files. There are 2 conditions because
if the folder is empty (at the beginning) it doesn't work.
- Function 10 calculates durations of each 'bsml', adds them with constants
to current date and time to determine the estimated end date & time
of all analyses. Then it displays results under format:
"Fin des analyses prévue le: dd/mm/yyyy à HH:MM:SS"

- At the end: programs counts and displays its duration (few seconds),
depending on the number of programmed analyses.

I won't add the display of my program when it's well-executed (with errors),
because the display has not changed significantly.
"""
